<?php

/*
 * The MIT License
 *
 * Copyright 2017 zozlak.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

namespace acdhOeaw\util;

use RuntimeException;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\Request;
use acdhOeaw\util\RepoConfig as RC;
use acdhOeaw\fedora\FedoraResource;
use acdhOeaw\fedora\metadataQuery\Query;
use acdhOeaw\fedora\metadataQuery\HasValue;
use acdhOeaw\fedora\metadataQuery\HasTriple;

/**
 * Description of DisseminationService
 *
 * @author zozlak
 */
class DisseminationService {

    static public $debug = false;
    private $service;
    private $reqPost     = false;
    private $parameters  = array();

    public function __construct(FedoraResource $res) {
        $this->service = $res;
    }

    public function findParams(string $resId) {
        $fedora = $this->service->getFedora();

        /*
         * ?resourceRes <http://purl.org/dc/terms/identifier> <foo> .
         * ?serviceParameterRes <http://purl.org/dc/terms/isPartOf> <bar> .
         * ?serviceParameterRes <https://vocabs.acdh.oeaw.ac.at/#usesRdfProperty> ?property .
         */
        $query    = new Query();
        $query->addParameter((new HasValue(RC::idProp(), $resId))->setSubVar('?resourceRes'));
        $query->addParameter((new HasValue(RC::relProp(), $this->service->getId()))->setSubVar('?paramRes'));
        $query->addParameter(new HasTriple('?paramRes', RC::get('fedoraServiceParamRdfPropertyProp'), '?property'));
        /*
         * optional { 
         *   ?resourceRes ?property ?val1 .
         *   optional {?res1 <http://purl.org/dc/terms/identifier> ?val1}
         * }
         */
        $subquery = new Query();
        $subquery->setJoinClause('optional');
        $subquery->addParameter(new HasTriple('?resourceRes', '?property', '?val1'));
        $subquery->addParameter((new HasTriple('?res1', RC::idProp(), '?val1'))->setOptional(true));
        $query->addSubquery($subquery);
        /*
         * optional {
         *   ?tmp2 ?property  ?val2 .
         *   ?resourceRes <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> / ^<http://purl.org/dc/terms/identifier> ?tmp2 .
         *   optional {?res2 <http://purl.org/dc/terms/identifier> ?val2}
         *  }
         */
        $subquery = new Query();
        $subquery->setJoinClause('optional');
        $subquery->addParameter(new HasTriple('?tmp2', '?property', '?val2'));
        $subquery->addParameter(new HasTriple('?resourceRes', array(Resolver::TYPE_PROP,
            '/',
            '^',
            RC::idProp()), '?tmp2'));
        $subquery->addParameter((new HasTriple('?res2', RC::idProp(), '?val2'))->setOptional(true));
        $query->addSubquery($subquery);

        $paramSet = $fedora->runQuery($query);

        foreach ($paramSet as $i) {
            $meta = $fedora->getResourceByUri($i->paramRes)->getMetadata();

            $byValue = $meta->getLiteral(RC::get('fedoraServiceParamByValueProp')) == 'true';
            $value   = (string) $meta->getLiteral(RC::get('fedoraServiceParamDefaultValueProp'));
            if (!$byValue && $value == '.') {
                $value = $resId;
            } elseif (isset($i->res1)) {
                $value = (string) $i->res1;
            } elseif (isset($i->val1)) {
                $value = (string) $i->val1;
            } elseif (isset($i->val2)) {
                $value = (string) $i->res2;
            } elseif (isset($i->val2)) {
                $value = (string) $i->val2;
            } else {
                // try to fetch value from parent classes
                /*
                 * select ?res ?val (count(?mid) as ?order)
                 * where {
                 *   optional {?res <http://purl.org/dc/terms/identifier> ?val}
                 *   ?val ^<https://vocabs.acdh.oeaw.ac.at/#hasSTYLESHEET> / <http://purl.org/dc/terms/identifier> / ( ^<http://www.w3.org/2000/01/rdf-schema#subClassOf> / <http://purl.org/dc/terms/identifier> )* ?mid .
                 *   ?mid ( ^<http://www.w3.org/2000/01/rdf-schema#subClassOf> / <http://purl.org/dc/terms/identifier> )+ / ^a ?end .
                 *   ?end <http://purl.org/dc/terms/identifier> <foo>
                 * }
                 * group by ?res ?val
                 * order by ?order
                 */
                $query  = new Query();
                $query->setSelect(array('?res', '?val', '(count(?mid) as ?order)'))->setGroupBy(array(
                    '?res', '?val'))->setOrderBy(array('?order'));
                $query->addParameter((new HasTriple('?res', RC::idProp(), '?val'))->setOptional(true));
                $query->addParameter(new HasTriple('?val', array('^', $i->property,
                    '/',
                    RC::idProp(), '/', '(', '^', Resolver::SUB_CLASS_PROP, '/', RC::idProp(),
                    ')', '*'), '?mid'));
                $query->addParameter(new HasTriple('?mid', array('(', '^', Resolver::SUB_CLASS_PROP,
                    '/', RC::idProp(), ')', '+', '/', '^', Resolver::TYPE_PROP), '?end'));
                $query->addParameter((new HasValue(RC::idProp(), $resId))->setSubVar('?end'));
                $result = $fedora->runQuery($query);
                if (count($result) > 0) {
                    $result = $result[0];
                    $value  = (string) (isset($result->res) ? $result->res : $result->val);
                }
            }

            $this->parameters[] = array(
                'name'    => (string) $meta->getLiteral(RC::titleProp()),
                'byValue' => $byValue,
                'value'   => $value
            );
            if ($byValue && preg_match('|^[a-zA-Z][-_a-zA-Z0-9]*://.|i', $value)) {
                $this->reqPost = true;
            }
        }
        if (self::$debug) {
            print_r($this->parameters);
        }
    }

    public function getUrl() {
        if ($this->reqPost) {
            throw new RuntimeException('This dissemination service requires a POST request', 500);
        }

        $baseUrl = $this->service->getMetadata()->getLiteral(RC::get('fedoraServiceLocProp')) . '?';

        $param = '';
        foreach ($this->parameters as $i) {
            $param .= '&' . rawurlencode($i['name']) . '=' . rawurlencode($i['value']);
        }

        return $baseUrl . substr($param, 1);
    }

    public function getRequest(): Request {        
        $headers = array(
            'Authorization'       => 'Basic ' . base64_encode('admin:admin')
        );
        
        $url = $this->service->getMetadata()->getLiteral(RC::get('fedoraServiceLocProp'));
        
        $input = @TODO; //http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data
        
        $request  = new Request('POST', $url, $headers, $input);
        return $request;
    }

    private function filterHeaders(Response $response) {
        static $skipHeaders = array('transfer-encoding', 'host');

        header('HTTP/1.1 ' . $response->getStatusCode() . ' ' . $response->getReasonPhrase());
        foreach ($response->getHeaders() as $name => $values) {
            if (in_array(strtolower($name), $skipHeaders)) {
                continue;
            }
            foreach ($values as $value) {
                header(sprintf('%s: %s', $name, $value), false);
            }
        }
    }

}

