<?php

/**
 * The MIT License
 *
 * Copyright 2017 Austrian Centre for Digital Humanities.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 * @package repo-php-util
 * @copyright (c) 2017, Austrian Centre for Digital Humanities
 * @license https://opensource.org/licenses/MIT
 */

namespace acdhOeaw\fedora\metadataQuery;

use EasyRdf\Literal;
use EasyRdf\Resource;
use EasyRdf\Serialiser\Ntriples;

/**
 *
 * @author zozlak
 */
abstract class QueryParameter {

    static private $counter      = 0;
    static private $objVarPrefix = '?v';

    /**
     * Serializer object
     * 
     * @var \EasyRdf\Serialiser\Ntriples
     */
    static private $serializer;

    /**
     * Initializes serializer used by `escapeLiteral()` and `escapeResource()`
     */
    static private function initSerializer() {
        if (!self::$serializer) {
            self::$serializer = new Ntriples();
        }
    }

    /**
     * Escapes a given string as an URI
     * 
     * @param string $uri
     * @return string
     */
    static public function escapeUri(string $uri): string {
        self::initSerializer();
        return self::$serializer->serialiseValue(new Resource($uri));
    }

    /**
     * Escapes a given string as a literal
     * 
     * @param string $literal
     * @return string
     */
    static public function escapeLiteral(string $literal): string {
        self::initSerializer();
        $value = self::$serializer->serialiseValue(new Literal($literal));
        return $value;
    }

    /**
     * Checks it a given string is a valid SPARQL variable name
     * (see https://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rVARNAME)
     * 
     * Current implementation is more restrictive that the SPARQL standard
     * as Unicode ranges #x00B7, #x0300-#x036F, #x203F-#x2040, #x00C0-#x00D6,
     * #x00D8-#x00F6, #x00F8-#x02FF, #x0370-#x037D, #x037F-#x1FFF, 
     * #x200C-#x200D, #x2070-#x218F, #x2C00-#x2FEF, #x3001-#xD7FF,
     * #xF900-#xFDCF, #xFDF0-#xFFFD and #x10000-#xEFFFF are NOT allowed.
     * 
     * @param string $variable SPARQL variable name to match
     */
    static public function isVariable(string $variable): bool {
        return preg_match('|^[?$][a-zA-Z0-9_]+|', $variable);
    }

    /**
     * Checks if a given string is a valid SPARQL path operator
     * 
     * @param string $op
     * @return bool
     */
    static public function isPathOp(string $op): bool {
        return in_array($op, array('!', '^', '|', '/', '*', '+', '?', '!^', '(',
            ')'));
    }

    /**
     * Checks if a given string is a valid left-side SPARQL path operator
     * 
     * @param string $op
     * @return bool
     */
    static public function isPathOpLeft(string $op): bool {
        return in_array($op, array('!', '^', '!^'));
    }

    /**
     * Checks if a given string is a valid right-side SPARQL path operator
     * 
     * @param string $op
     * @return bool
     */
    static public function isPathOpRight(string $op): bool {
        return in_array($op, array('*', '+', '?'));
    }

    /**
     * Checks if a given string is a valid both-sides SPARQL path operator
     * 
     * @param string $op
     * @return bool
     */
    static public function isPathOpTwoSided(string $op): bool {
        return in_array($op, array('/', '|'));
    }

    /**
     * Checks if a given string is an URI
     * 
     * @param string $string
     * @return bool
     */
    static public function isUri(string $string): bool {
        return preg_match('#[a-z0-9+.-]+://#', $string);
    }

    protected $subVar   = '?res';
    protected $objVar;
    protected $optional = false;

    public function __construct() {
        self::$counter++;
        $this->objVar = self::$objVarPrefix . self::$counter;
    }

    public function setSubVar(string $subVar): QueryParameter {
        $this->subVar = $subVar;
        return $this;
    }

    public function setObjVar(string $objVar): QueryParameter {
        $this->objVar = $objVar;
        return $this;
    }

    public function setOptional(bool $optional): QueryParameter {
        $this->optional = $optional;
        return $this;
    }

    public function getSubVar(): string {
        return $this->subVar;
    }

    public function getObjVar(): string {
        return $this->objVar;
    }

    public function getOptional(): bool {
        return $this->optional;
    }

    abstract public function getWhere(): string;

    abstract public function getFilter(): string;

    protected function applyOptional(string $query) {
        if ($this->optional) {
            return 'OPTIONAL {' . $query . '}';
        }
        return $query;
    }

}

